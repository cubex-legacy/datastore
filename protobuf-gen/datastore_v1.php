<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: datastore_v1.proto
//   Date: 2013-05-24 10:05:50

namespace api\services\datastore\PartitionId {

  class Constants extends \DrSlump\Protobuf\Enum {
    const MAX_DIMENSION_TAG = 100;
  }
}
namespace api\services\datastore {

  class PartitionId extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $dataset_id = null;

    /**  @var string */
    public $namespace = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.PartitionId');

      // OPTIONAL STRING dataset_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dataset_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dataset_id> has a value
     *
     * @return boolean
     */
    public function hasDatasetId(){
      return $this->_has(3);
    }

    /**
     * Clear <dataset_id> value
     *
     * @return \api\services\datastore\PartitionId
     */
    public function clearDatasetId(){
      return $this->_clear(3);
    }

    /**
     * Get <dataset_id> value
     *
     * @return string
     */
    public function getDatasetId(){
      return $this->_get(3);
    }

    /**
     * Set <dataset_id> value
     *
     * @param string $value
     * @return \api\services\datastore\PartitionId
     */
    public function setDatasetId( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <namespace> has a value
     *
     * @return boolean
     */
    public function hasNamespace(){
      return $this->_has(4);
    }

    /**
     * Clear <namespace> value
     *
     * @return \api\services\datastore\PartitionId
     */
    public function clearNamespace(){
      return $this->_clear(4);
    }

    /**
     * Get <namespace> value
     *
     * @return string
     */
    public function getNamespace(){
      return $this->_get(4);
    }

    /**
     * Set <namespace> value
     *
     * @param string $value
     * @return \api\services\datastore\PartitionId
     */
    public function setNamespace( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace api\services\datastore\Key {

  class PathElement extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kind = null;

    /**  @var int */
    public $id = null;

    /**  @var string */
    public $name = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Key.PathElement');

      // REQUIRED STRING kind = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT64 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(1);
    }

    /**
     * Clear <kind> value
     *
     * @return \api\services\datastore\Key\PathElement
     */
    public function clearKind(){
      return $this->_clear(1);
    }

    /**
     * Get <kind> value
     *
     * @return string
     */
    public function getKind(){
      return $this->_get(1);
    }

    /**
     * Set <kind> value
     *
     * @param string $value
     * @return \api\services\datastore\Key\PathElement
     */
    public function setKind( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }

    /**
     * Clear <id> value
     *
     * @return \api\services\datastore\Key\PathElement
     */
    public function clearId(){
      return $this->_clear(2);
    }

    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }

    /**
     * Set <id> value
     *
     * @param int $value
     * @return \api\services\datastore\Key\PathElement
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }

    /**
     * Clear <name> value
     *
     * @return \api\services\datastore\Key\PathElement
     */
    public function clearName(){
      return $this->_clear(3);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \api\services\datastore\Key\PathElement
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace api\services\datastore {

  class Key extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\PartitionId */
    public $partition_id = null;

    /**  @var \api\services\datastore\Key\PathElement[]  */
    public $path_element = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Key');

      // OPTIONAL MESSAGE partition_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "partition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\PartitionId';
      $descriptor->addField($f);

      // REPEATED MESSAGE path_element = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path_element";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key\PathElement';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <partition_id> has a value
     *
     * @return boolean
     */
    public function hasPartitionId(){
      return $this->_has(1);
    }

    /**
     * Clear <partition_id> value
     *
     * @return \api\services\datastore\Key
     */
    public function clearPartitionId(){
      return $this->_clear(1);
    }

    /**
     * Get <partition_id> value
     *
     * @return \api\services\datastore\PartitionId
     */
    public function getPartitionId(){
      return $this->_get(1);
    }

    /**
     * Set <partition_id> value
     *
     * @param \api\services\datastore\PartitionId $value
     * @return \api\services\datastore\Key
     */
    public function setPartitionId(\api\services\datastore\PartitionId $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <path_element> has a value
     *
     * @return boolean
     */
    public function hasPathElement(){
      return $this->_has(2);
    }

    /**
     * Clear <path_element> value
     *
     * @return \api\services\datastore\Key
     */
    public function clearPathElement(){
      return $this->_clear(2);
    }

    /**
     * Get <path_element> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key\PathElement
     */
    public function getPathElement($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <path_element> value
     *
     * @param \api\services\datastore\Key\PathElement $value
     * @return \api\services\datastore\Key
     */
    public function setPathElement(\api\services\datastore\Key\PathElement $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <path_element>
     *
     * @return \api\services\datastore\Key\PathElement[]
     */
    public function getPathElementList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <path_element>
     *
     * @param \api\services\datastore\Key\PathElement $value
     * @return \api\services\datastore\Key
     */
    public function addPathElement(\api\services\datastore\Key\PathElement $value){
     return $this->_add(2, $value);
    }
  }
}

namespace api\services\datastore {

  class Value extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $boolean_value = null;

    /**  @var int */
    public $integer_value = null;

    /**  @var float */
    public $double_value = null;

    /**  @var int */
    public $timestamp_microseconds_value = null;

    /**  @var \api\services\datastore\Key */
    public $key_value = null;

    /**  @var string */
    public $blob_key_value = null;

    /**  @var string */
    public $string_value = null;

    /**  @var string */
    public $blob_value = null;

    /**  @var \api\services\datastore\Entity */
    public $entity_value = null;

    /**  @var int */
    public $meaning = null;

    /**  @var boolean */
    public $indexed = true;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Value');

      // OPTIONAL BOOL boolean_value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "boolean_value";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 integer_value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "integer_value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE double_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "double_value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 timestamp_microseconds_value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "timestamp_microseconds_value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE key_value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "key_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      // OPTIONAL STRING blob_key_value = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "blob_key_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING string_value = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "string_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES blob_value = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "blob_value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE entity_value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "entity_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\Entity';
      $descriptor->addField($f);

      // OPTIONAL INT32 meaning = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "meaning";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL indexed = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "indexed";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <boolean_value> has a value
     *
     * @return boolean
     */
    public function hasBooleanValue(){
      return $this->_has(1);
    }

    /**
     * Clear <boolean_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearBooleanValue(){
      return $this->_clear(1);
    }

    /**
     * Get <boolean_value> value
     *
     * @return boolean
     */
    public function getBooleanValue(){
      return $this->_get(1);
    }

    /**
     * Set <boolean_value> value
     *
     * @param boolean $value
     * @return \api\services\datastore\Value
     */
    public function setBooleanValue( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <integer_value> has a value
     *
     * @return boolean
     */
    public function hasIntegerValue(){
      return $this->_has(2);
    }

    /**
     * Clear <integer_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearIntegerValue(){
      return $this->_clear(2);
    }

    /**
     * Get <integer_value> value
     *
     * @return int
     */
    public function getIntegerValue(){
      return $this->_get(2);
    }

    /**
     * Set <integer_value> value
     *
     * @param int $value
     * @return \api\services\datastore\Value
     */
    public function setIntegerValue( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <double_value> has a value
     *
     * @return boolean
     */
    public function hasDoubleValue(){
      return $this->_has(3);
    }

    /**
     * Clear <double_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearDoubleValue(){
      return $this->_clear(3);
    }

    /**
     * Get <double_value> value
     *
     * @return float
     */
    public function getDoubleValue(){
      return $this->_get(3);
    }

    /**
     * Set <double_value> value
     *
     * @param float $value
     * @return \api\services\datastore\Value
     */
    public function setDoubleValue( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <timestamp_microseconds_value> has a value
     *
     * @return boolean
     */
    public function hasTimestampMicrosecondsValue(){
      return $this->_has(4);
    }

    /**
     * Clear <timestamp_microseconds_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearTimestampMicrosecondsValue(){
      return $this->_clear(4);
    }

    /**
     * Get <timestamp_microseconds_value> value
     *
     * @return int
     */
    public function getTimestampMicrosecondsValue(){
      return $this->_get(4);
    }

    /**
     * Set <timestamp_microseconds_value> value
     *
     * @param int $value
     * @return \api\services\datastore\Value
     */
    public function setTimestampMicrosecondsValue( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <key_value> has a value
     *
     * @return boolean
     */
    public function hasKeyValue(){
      return $this->_has(5);
    }

    /**
     * Clear <key_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearKeyValue(){
      return $this->_clear(5);
    }

    /**
     * Get <key_value> value
     *
     * @return \api\services\datastore\Key
     */
    public function getKeyValue(){
      return $this->_get(5);
    }

    /**
     * Set <key_value> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\Value
     */
    public function setKeyValue(\api\services\datastore\Key $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <blob_key_value> has a value
     *
     * @return boolean
     */
    public function hasBlobKeyValue(){
      return $this->_has(16);
    }

    /**
     * Clear <blob_key_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearBlobKeyValue(){
      return $this->_clear(16);
    }

    /**
     * Get <blob_key_value> value
     *
     * @return string
     */
    public function getBlobKeyValue(){
      return $this->_get(16);
    }

    /**
     * Set <blob_key_value> value
     *
     * @param string $value
     * @return \api\services\datastore\Value
     */
    public function setBlobKeyValue( $value){
      return $this->_set(16, $value);
    }

    /**
     * Check if <string_value> has a value
     *
     * @return boolean
     */
    public function hasStringValue(){
      return $this->_has(17);
    }

    /**
     * Clear <string_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearStringValue(){
      return $this->_clear(17);
    }

    /**
     * Get <string_value> value
     *
     * @return string
     */
    public function getStringValue(){
      return $this->_get(17);
    }

    /**
     * Set <string_value> value
     *
     * @param string $value
     * @return \api\services\datastore\Value
     */
    public function setStringValue( $value){
      return $this->_set(17, $value);
    }

    /**
     * Check if <blob_value> has a value
     *
     * @return boolean
     */
    public function hasBlobValue(){
      return $this->_has(18);
    }

    /**
     * Clear <blob_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearBlobValue(){
      return $this->_clear(18);
    }

    /**
     * Get <blob_value> value
     *
     * @return string
     */
    public function getBlobValue(){
      return $this->_get(18);
    }

    /**
     * Set <blob_value> value
     *
     * @param string $value
     * @return \api\services\datastore\Value
     */
    public function setBlobValue( $value){
      return $this->_set(18, $value);
    }

    /**
     * Check if <entity_value> has a value
     *
     * @return boolean
     */
    public function hasEntityValue(){
      return $this->_has(6);
    }

    /**
     * Clear <entity_value> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearEntityValue(){
      return $this->_clear(6);
    }

    /**
     * Get <entity_value> value
     *
     * @return \api\services\datastore\Entity
     */
    public function getEntityValue(){
      return $this->_get(6);
    }

    /**
     * Set <entity_value> value
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Value
     */
    public function setEntityValue(\api\services\datastore\Entity $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <meaning> has a value
     *
     * @return boolean
     */
    public function hasMeaning(){
      return $this->_has(14);
    }

    /**
     * Clear <meaning> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearMeaning(){
      return $this->_clear(14);
    }

    /**
     * Get <meaning> value
     *
     * @return int
     */
    public function getMeaning(){
      return $this->_get(14);
    }

    /**
     * Set <meaning> value
     *
     * @param int $value
     * @return \api\services\datastore\Value
     */
    public function setMeaning( $value){
      return $this->_set(14, $value);
    }

    /**
     * Check if <indexed> has a value
     *
     * @return boolean
     */
    public function hasIndexed(){
      return $this->_has(15);
    }

    /**
     * Clear <indexed> value
     *
     * @return \api\services\datastore\Value
     */
    public function clearIndexed(){
      return $this->_clear(15);
    }

    /**
     * Get <indexed> value
     *
     * @return boolean
     */
    public function getIndexed(){
      return $this->_get(15);
    }

    /**
     * Set <indexed> value
     *
     * @param boolean $value
     * @return \api\services\datastore\Value
     */
    public function setIndexed( $value){
      return $this->_set(15, $value);
    }
  }
}

namespace api\services\datastore {

  class Property extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;

    /**  @var boolean */
    public $multi = true;

    /**  @var \api\services\datastore\Value[]  */
    public $value = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Property');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL multi = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "multi";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      // REPEATED MESSAGE value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \api\services\datastore\Property
     */
    public function clearName(){
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \api\services\datastore\Property
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <multi> has a value
     *
     * @return boolean
     */
    public function hasMulti(){
      return $this->_has(2);
    }

    /**
     * Clear <multi> value
     *
     * @return \api\services\datastore\Property
     */
    public function clearMulti(){
      return $this->_clear(2);
    }

    /**
     * Get <multi> value
     *
     * @return boolean
     */
    public function getMulti(){
      return $this->_get(2);
    }

    /**
     * Set <multi> value
     *
     * @param boolean $value
     * @return \api\services\datastore\Property
     */
    public function setMulti( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(3);
    }

    /**
     * Clear <value> value
     *
     * @return \api\services\datastore\Property
     */
    public function clearValue(){
      return $this->_clear(3);
    }

    /**
     * Get <value> value
     *
     * @param int $idx
     * @return \api\services\datastore\Value
     */
    public function getValue($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <value> value
     *
     * @param \api\services\datastore\Value $value
     * @return \api\services\datastore\Property
     */
    public function setValue(\api\services\datastore\Value $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <value>
     *
     * @return \api\services\datastore\Value[]
     */
    public function getValueList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <value>
     *
     * @param \api\services\datastore\Value $value
     * @return \api\services\datastore\Property
     */
    public function addValue(\api\services\datastore\Value $value){
     return $this->_add(3, $value);
    }
  }
}

namespace api\services\datastore {

  class Entity extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\Key */
    public $key = null;

    /**  @var \api\services\datastore\Property[]  */
    public $property = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Entity');

      // OPTIONAL MESSAGE key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      // REPEATED MESSAGE property = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Property';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \api\services\datastore\Entity
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return \api\services\datastore\Key
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\Entity
     */
    public function setKey(\api\services\datastore\Key $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(2);
    }

    /**
     * Clear <property> value
     *
     * @return \api\services\datastore\Entity
     */
    public function clearProperty(){
      return $this->_clear(2);
    }

    /**
     * Get <property> value
     *
     * @param int $idx
     * @return \api\services\datastore\Property
     */
    public function getProperty($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <property> value
     *
     * @param \api\services\datastore\Property $value
     * @return \api\services\datastore\Entity
     */
    public function setProperty(\api\services\datastore\Property $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <property>
     *
     * @return \api\services\datastore\Property[]
     */
    public function getPropertyList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <property>
     *
     * @param \api\services\datastore\Property $value
     * @return \api\services\datastore\Entity
     */
    public function addProperty(\api\services\datastore\Property $value){
     return $this->_add(2, $value);
    }
  }
}

namespace api\services\datastore\EntityResult {

  class ResultType extends \DrSlump\Protobuf\Enum {
    const FULL = 1;
    const PROJECTION = 2;
    const KEY_ONLY = 3;
  }
}
namespace api\services\datastore {

  class EntityResult extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\Entity */
    public $entity = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.EntityResult');

      // REQUIRED MESSAGE entity = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\Entity';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entity> has a value
     *
     * @return boolean
     */
    public function hasEntity(){
      return $this->_has(1);
    }

    /**
     * Clear <entity> value
     *
     * @return \api\services\datastore\EntityResult
     */
    public function clearEntity(){
      return $this->_clear(1);
    }

    /**
     * Get <entity> value
     *
     * @return \api\services\datastore\Entity
     */
    public function getEntity(){
      return $this->_get(1);
    }

    /**
     * Set <entity> value
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\EntityResult
     */
    public function setEntity(\api\services\datastore\Entity $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class Query extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\PropertyExpression[]  */
    public $projection = array();

    /**  @var \api\services\datastore\KindExpression[]  */
    public $kind = array();

    /**  @var \api\services\datastore\Filter */
    public $filter = null;

    /**  @var \api\services\datastore\PropertyOrder[]  */
    public $order = array();

    /**  @var \api\services\datastore\PropertyReference[]  */
    public $group_by = array();

    /**  @var string */
    public $start_cursor = null;

    /**  @var string */
    public $end_cursor = null;

    /**  @var int */
    public $offset = 0;

    /**  @var int */
    public $limit = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Query');

      // REPEATED MESSAGE projection = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "projection";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\PropertyExpression';
      $descriptor->addField($f);

      // REPEATED MESSAGE kind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\KindExpression';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\Filter';
      $descriptor->addField($f);

      // REPEATED MESSAGE order = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "order";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\PropertyOrder';
      $descriptor->addField($f);

      // REPEATED MESSAGE group_by = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "group_by";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL BYTES start_cursor = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "start_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_cursor = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "end_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 offset = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "offset";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL INT32 limit = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <projection> has a value
     *
     * @return boolean
     */
    public function hasProjection(){
      return $this->_has(2);
    }

    /**
     * Clear <projection> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearProjection(){
      return $this->_clear(2);
    }

    /**
     * Get <projection> value
     *
     * @param int $idx
     * @return \api\services\datastore\PropertyExpression
     */
    public function getProjection($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <projection> value
     *
     * @param \api\services\datastore\PropertyExpression $value
     * @return \api\services\datastore\Query
     */
    public function setProjection(\api\services\datastore\PropertyExpression $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <projection>
     *
     * @return \api\services\datastore\PropertyExpression[]
     */
    public function getProjectionList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <projection>
     *
     * @param \api\services\datastore\PropertyExpression $value
     * @return \api\services\datastore\Query
     */
    public function addProjection(\api\services\datastore\PropertyExpression $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(3);
    }

    /**
     * Clear <kind> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearKind(){
      return $this->_clear(3);
    }

    /**
     * Get <kind> value
     *
     * @param int $idx
     * @return \api\services\datastore\KindExpression
     */
    public function getKind($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <kind> value
     *
     * @param \api\services\datastore\KindExpression $value
     * @return \api\services\datastore\Query
     */
    public function setKind(\api\services\datastore\KindExpression $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <kind>
     *
     * @return \api\services\datastore\KindExpression[]
     */
    public function getKindList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <kind>
     *
     * @param \api\services\datastore\KindExpression $value
     * @return \api\services\datastore\Query
     */
    public function addKind(\api\services\datastore\KindExpression $value){
     return $this->_add(3, $value);
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(4);
    }

    /**
     * Clear <filter> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearFilter(){
      return $this->_clear(4);
    }

    /**
     * Get <filter> value
     *
     * @return \api\services\datastore\Filter
     */
    public function getFilter(){
      return $this->_get(4);
    }

    /**
     * Set <filter> value
     *
     * @param \api\services\datastore\Filter $value
     * @return \api\services\datastore\Query
     */
    public function setFilter(\api\services\datastore\Filter $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <order> has a value
     *
     * @return boolean
     */
    public function hasOrder(){
      return $this->_has(5);
    }

    /**
     * Clear <order> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearOrder(){
      return $this->_clear(5);
    }

    /**
     * Get <order> value
     *
     * @param int $idx
     * @return \api\services\datastore\PropertyOrder
     */
    public function getOrder($idx = NULL){
      return $this->_get(5, $idx);
    }

    /**
     * Set <order> value
     *
     * @param \api\services\datastore\PropertyOrder $value
     * @return \api\services\datastore\Query
     */
    public function setOrder(\api\services\datastore\PropertyOrder $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <order>
     *
     * @return \api\services\datastore\PropertyOrder[]
     */
    public function getOrderList(){
     return $this->_get(5);
    }

    /**
     * Add a new element to <order>
     *
     * @param \api\services\datastore\PropertyOrder $value
     * @return \api\services\datastore\Query
     */
    public function addOrder(\api\services\datastore\PropertyOrder $value){
     return $this->_add(5, $value);
    }

    /**
     * Check if <group_by> has a value
     *
     * @return boolean
     */
    public function hasGroupBy(){
      return $this->_has(6);
    }

    /**
     * Clear <group_by> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearGroupBy(){
      return $this->_clear(6);
    }

    /**
     * Get <group_by> value
     *
     * @param int $idx
     * @return \api\services\datastore\PropertyReference
     */
    public function getGroupBy($idx = NULL){
      return $this->_get(6, $idx);
    }

    /**
     * Set <group_by> value
     *
     * @param \api\services\datastore\PropertyReference $value
     * @return \api\services\datastore\Query
     */
    public function setGroupBy(\api\services\datastore\PropertyReference $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <group_by>
     *
     * @return \api\services\datastore\PropertyReference[]
     */
    public function getGroupByList(){
     return $this->_get(6);
    }

    /**
     * Add a new element to <group_by>
     *
     * @param \api\services\datastore\PropertyReference $value
     * @return \api\services\datastore\Query
     */
    public function addGroupBy(\api\services\datastore\PropertyReference $value){
     return $this->_add(6, $value);
    }

    /**
     * Check if <start_cursor> has a value
     *
     * @return boolean
     */
    public function hasStartCursor(){
      return $this->_has(7);
    }

    /**
     * Clear <start_cursor> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearStartCursor(){
      return $this->_clear(7);
    }

    /**
     * Get <start_cursor> value
     *
     * @return string
     */
    public function getStartCursor(){
      return $this->_get(7);
    }

    /**
     * Set <start_cursor> value
     *
     * @param string $value
     * @return \api\services\datastore\Query
     */
    public function setStartCursor( $value){
      return $this->_set(7, $value);
    }

    /**
     * Check if <end_cursor> has a value
     *
     * @return boolean
     */
    public function hasEndCursor(){
      return $this->_has(8);
    }

    /**
     * Clear <end_cursor> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearEndCursor(){
      return $this->_clear(8);
    }

    /**
     * Get <end_cursor> value
     *
     * @return string
     */
    public function getEndCursor(){
      return $this->_get(8);
    }

    /**
     * Set <end_cursor> value
     *
     * @param string $value
     * @return \api\services\datastore\Query
     */
    public function setEndCursor( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <offset> has a value
     *
     * @return boolean
     */
    public function hasOffset(){
      return $this->_has(10);
    }

    /**
     * Clear <offset> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearOffset(){
      return $this->_clear(10);
    }

    /**
     * Get <offset> value
     *
     * @return int
     */
    public function getOffset(){
      return $this->_get(10);
    }

    /**
     * Set <offset> value
     *
     * @param int $value
     * @return \api\services\datastore\Query
     */
    public function setOffset( $value){
      return $this->_set(10, $value);
    }

    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(11);
    }

    /**
     * Clear <limit> value
     *
     * @return \api\services\datastore\Query
     */
    public function clearLimit(){
      return $this->_clear(11);
    }

    /**
     * Get <limit> value
     *
     * @return int
     */
    public function getLimit(){
      return $this->_get(11);
    }

    /**
     * Set <limit> value
     *
     * @param int $value
     * @return \api\services\datastore\Query
     */
    public function setLimit( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace api\services\datastore {

  class KindExpression extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.KindExpression');

      // REQUIRED STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \api\services\datastore\KindExpression
     */
    public function clearName(){
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \api\services\datastore\KindExpression
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class PropertyReference extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.PropertyReference');

      // REQUIRED STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }

    /**
     * Clear <name> value
     *
     * @return \api\services\datastore\PropertyReference
     */
    public function clearName(){
      return $this->_clear(2);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \api\services\datastore\PropertyReference
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace api\services\datastore\PropertyExpression {

  class AggregationFunction extends \DrSlump\Protobuf\Enum {
    const FIRST = 1;
  }
}
namespace api\services\datastore {

  class PropertyExpression extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\PropertyReference */
    public $property = null;

    /**  @var int - \api\services\datastore\PropertyExpression\AggregationFunction */
    public $aggregation_function = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.PropertyExpression');

      // REQUIRED MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL ENUM aggregation_function = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "aggregation_function";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\PropertyExpression\AggregationFunction';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \api\services\datastore\PropertyExpression
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \api\services\datastore\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \api\services\datastore\PropertyReference $value
     * @return \api\services\datastore\PropertyExpression
     */
    public function setProperty(\api\services\datastore\PropertyReference $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <aggregation_function> has a value
     *
     * @return boolean
     */
    public function hasAggregationFunction(){
      return $this->_has(2);
    }

    /**
     * Clear <aggregation_function> value
     *
     * @return \api\services\datastore\PropertyExpression
     */
    public function clearAggregationFunction(){
      return $this->_clear(2);
    }

    /**
     * Get <aggregation_function> value
     *
     * @return int - \api\services\datastore\PropertyExpression\AggregationFunction
     */
    public function getAggregationFunction(){
      return $this->_get(2);
    }

    /**
     * Set <aggregation_function> value
     *
     * @param int - \api\services\datastore\PropertyExpression\AggregationFunction $value
     * @return \api\services\datastore\PropertyExpression
     */
    public function setAggregationFunction( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace api\services\datastore\PropertyOrder {

  class Direction extends \DrSlump\Protobuf\Enum {
    const ASCENDING = 1;
    const DESCENDING = 2;
  }
}
namespace api\services\datastore {

  class PropertyOrder extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\PropertyReference */
    public $property = null;

    /**  @var int - \api\services\datastore\PropertyOrder\Direction */
    public $direction = \api\services\datastore\PropertyOrder\Direction::ASCENDING;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.PropertyOrder');

      // REQUIRED MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL ENUM direction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "direction";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\PropertyOrder\Direction';
      $f->default   = \api\services\datastore\PropertyOrder\Direction::ASCENDING;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \api\services\datastore\PropertyOrder
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \api\services\datastore\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \api\services\datastore\PropertyReference $value
     * @return \api\services\datastore\PropertyOrder
     */
    public function setProperty(\api\services\datastore\PropertyReference $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <direction> has a value
     *
     * @return boolean
     */
    public function hasDirection(){
      return $this->_has(2);
    }

    /**
     * Clear <direction> value
     *
     * @return \api\services\datastore\PropertyOrder
     */
    public function clearDirection(){
      return $this->_clear(2);
    }

    /**
     * Get <direction> value
     *
     * @return int - \api\services\datastore\PropertyOrder\Direction
     */
    public function getDirection(){
      return $this->_get(2);
    }

    /**
     * Set <direction> value
     *
     * @param int - \api\services\datastore\PropertyOrder\Direction $value
     * @return \api\services\datastore\PropertyOrder
     */
    public function setDirection( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace api\services\datastore {

  class Filter extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\CompositeFilter */
    public $composite_filter = null;

    /**  @var \api\services\datastore\PropertyFilter */
    public $property_filter = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Filter');

      // OPTIONAL MESSAGE composite_filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "composite_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\CompositeFilter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE property_filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "property_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\PropertyFilter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <composite_filter> has a value
     *
     * @return boolean
     */
    public function hasCompositeFilter(){
      return $this->_has(1);
    }

    /**
     * Clear <composite_filter> value
     *
     * @return \api\services\datastore\Filter
     */
    public function clearCompositeFilter(){
      return $this->_clear(1);
    }

    /**
     * Get <composite_filter> value
     *
     * @return \api\services\datastore\CompositeFilter
     */
    public function getCompositeFilter(){
      return $this->_get(1);
    }

    /**
     * Set <composite_filter> value
     *
     * @param \api\services\datastore\CompositeFilter $value
     * @return \api\services\datastore\Filter
     */
    public function setCompositeFilter(\api\services\datastore\CompositeFilter $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <property_filter> has a value
     *
     * @return boolean
     */
    public function hasPropertyFilter(){
      return $this->_has(2);
    }

    /**
     * Clear <property_filter> value
     *
     * @return \api\services\datastore\Filter
     */
    public function clearPropertyFilter(){
      return $this->_clear(2);
    }

    /**
     * Get <property_filter> value
     *
     * @return \api\services\datastore\PropertyFilter
     */
    public function getPropertyFilter(){
      return $this->_get(2);
    }

    /**
     * Set <property_filter> value
     *
     * @param \api\services\datastore\PropertyFilter $value
     * @return \api\services\datastore\Filter
     */
    public function setPropertyFilter(\api\services\datastore\PropertyFilter $value){
      return $this->_set(2, $value);
    }
  }
}

namespace api\services\datastore\CompositeFilter {

  class Operator extends \DrSlump\Protobuf\Enum {
    const _AND = 1;
  }
}
namespace api\services\datastore {

  class CompositeFilter extends \DrSlump\Protobuf\Message {

    /**  @var int - \api\services\datastore\CompositeFilter\Operator */
    public $operator = null;

    /**  @var \api\services\datastore\Filter[]  */
    public $filter = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.CompositeFilter');

      // REQUIRED ENUM operator = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\CompositeFilter\Operator';
      $descriptor->addField($f);

      // REPEATED MESSAGE filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Filter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(1);
    }

    /**
     * Clear <operator> value
     *
     * @return \api\services\datastore\CompositeFilter
     */
    public function clearOperator(){
      return $this->_clear(1);
    }

    /**
     * Get <operator> value
     *
     * @return int - \api\services\datastore\CompositeFilter\Operator
     */
    public function getOperator(){
      return $this->_get(1);
    }

    /**
     * Set <operator> value
     *
     * @param int - \api\services\datastore\CompositeFilter\Operator $value
     * @return \api\services\datastore\CompositeFilter
     */
    public function setOperator( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(2);
    }

    /**
     * Clear <filter> value
     *
     * @return \api\services\datastore\CompositeFilter
     */
    public function clearFilter(){
      return $this->_clear(2);
    }

    /**
     * Get <filter> value
     *
     * @param int $idx
     * @return \api\services\datastore\Filter
     */
    public function getFilter($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <filter> value
     *
     * @param \api\services\datastore\Filter $value
     * @return \api\services\datastore\CompositeFilter
     */
    public function setFilter(\api\services\datastore\Filter $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <filter>
     *
     * @return \api\services\datastore\Filter[]
     */
    public function getFilterList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <filter>
     *
     * @param \api\services\datastore\Filter $value
     * @return \api\services\datastore\CompositeFilter
     */
    public function addFilter(\api\services\datastore\Filter $value){
     return $this->_add(2, $value);
    }
  }
}

namespace api\services\datastore\PropertyFilter {

  class Operator extends \DrSlump\Protobuf\Enum {
    const LESS_THAN = 1;
    const LESS_THAN_OR_EQUAL = 2;
    const GREATER_THAN = 3;
    const GREATER_THAN_OR_EQUAL = 4;
    const EQUAL = 5;
    const HAS_ANCESTOR = 11;
  }
}
namespace api\services\datastore {

  class PropertyFilter extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\PropertyReference */
    public $property = null;

    /**  @var int - \api\services\datastore\PropertyFilter\Operator */
    public $operator = null;

    /**  @var \api\services\datastore\Value */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.PropertyFilter');

      // REQUIRED MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\PropertyReference';
      $descriptor->addField($f);

      // REQUIRED ENUM operator = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\PropertyFilter\Operator';
      $descriptor->addField($f);

      // REQUIRED MESSAGE value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \api\services\datastore\PropertyFilter
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \api\services\datastore\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \api\services\datastore\PropertyReference $value
     * @return \api\services\datastore\PropertyFilter
     */
    public function setProperty(\api\services\datastore\PropertyReference $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(2);
    }

    /**
     * Clear <operator> value
     *
     * @return \api\services\datastore\PropertyFilter
     */
    public function clearOperator(){
      return $this->_clear(2);
    }

    /**
     * Get <operator> value
     *
     * @return int - \api\services\datastore\PropertyFilter\Operator
     */
    public function getOperator(){
      return $this->_get(2);
    }

    /**
     * Set <operator> value
     *
     * @param int - \api\services\datastore\PropertyFilter\Operator $value
     * @return \api\services\datastore\PropertyFilter
     */
    public function setOperator( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(3);
    }

    /**
     * Clear <value> value
     *
     * @return \api\services\datastore\PropertyFilter
     */
    public function clearValue(){
      return $this->_clear(3);
    }

    /**
     * Get <value> value
     *
     * @return \api\services\datastore\Value
     */
    public function getValue(){
      return $this->_get(3);
    }

    /**
     * Set <value> value
     *
     * @param \api\services\datastore\Value $value
     * @return \api\services\datastore\PropertyFilter
     */
    public function setValue(\api\services\datastore\Value $value){
      return $this->_set(3, $value);
    }
  }
}

namespace api\services\datastore\QueryResultBatch {

  class MoreResultsType extends \DrSlump\Protobuf\Enum {
    const NOT_FINISHED = 1;
    const MORE_RESULTS_AFTER_LIMIT = 2;
    const NO_MORE_RESULTS = 3;
  }
}
namespace api\services\datastore {

  class QueryResultBatch extends \DrSlump\Protobuf\Message {

    /**  @var int - \api\services\datastore\EntityResult\ResultType */
    public $entity_result_type = null;

    /**  @var \api\services\datastore\EntityResult[]  */
    public $entity_result = array();

    /**  @var string */
    public $end_cursor = null;

    /**  @var int - \api\services\datastore\QueryResultBatch\MoreResultsType */
    public $more_results = null;

    /**  @var int */
    public $skipped_results = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.QueryResultBatch');

      // REQUIRED ENUM entity_result_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity_result_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\EntityResult\ResultType';
      $descriptor->addField($f);

      // REPEATED MESSAGE entity_result = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entity_result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\EntityResult';
      $descriptor->addField($f);

      // OPTIONAL BYTES end_cursor = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED ENUM more_results = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "more_results";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\QueryResultBatch\MoreResultsType';
      $descriptor->addField($f);

      // OPTIONAL INT32 skipped_results = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "skipped_results";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entity_result_type> has a value
     *
     * @return boolean
     */
    public function hasEntityResultType(){
      return $this->_has(1);
    }

    /**
     * Clear <entity_result_type> value
     *
     * @return \api\services\datastore\QueryResultBatch
     */
    public function clearEntityResultType(){
      return $this->_clear(1);
    }

    /**
     * Get <entity_result_type> value
     *
     * @return int - \api\services\datastore\EntityResult\ResultType
     */
    public function getEntityResultType(){
      return $this->_get(1);
    }

    /**
     * Set <entity_result_type> value
     *
     * @param int - \api\services\datastore\EntityResult\ResultType $value
     * @return \api\services\datastore\QueryResultBatch
     */
    public function setEntityResultType( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <entity_result> has a value
     *
     * @return boolean
     */
    public function hasEntityResult(){
      return $this->_has(2);
    }

    /**
     * Clear <entity_result> value
     *
     * @return \api\services\datastore\QueryResultBatch
     */
    public function clearEntityResult(){
      return $this->_clear(2);
    }

    /**
     * Get <entity_result> value
     *
     * @param int $idx
     * @return \api\services\datastore\EntityResult
     */
    public function getEntityResult($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <entity_result> value
     *
     * @param \api\services\datastore\EntityResult $value
     * @return \api\services\datastore\QueryResultBatch
     */
    public function setEntityResult(\api\services\datastore\EntityResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <entity_result>
     *
     * @return \api\services\datastore\EntityResult[]
     */
    public function getEntityResultList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <entity_result>
     *
     * @param \api\services\datastore\EntityResult $value
     * @return \api\services\datastore\QueryResultBatch
     */
    public function addEntityResult(\api\services\datastore\EntityResult $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <end_cursor> has a value
     *
     * @return boolean
     */
    public function hasEndCursor(){
      return $this->_has(4);
    }

    /**
     * Clear <end_cursor> value
     *
     * @return \api\services\datastore\QueryResultBatch
     */
    public function clearEndCursor(){
      return $this->_clear(4);
    }

    /**
     * Get <end_cursor> value
     *
     * @return string
     */
    public function getEndCursor(){
      return $this->_get(4);
    }

    /**
     * Set <end_cursor> value
     *
     * @param string $value
     * @return \api\services\datastore\QueryResultBatch
     */
    public function setEndCursor( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <more_results> has a value
     *
     * @return boolean
     */
    public function hasMoreResults(){
      return $this->_has(5);
    }

    /**
     * Clear <more_results> value
     *
     * @return \api\services\datastore\QueryResultBatch
     */
    public function clearMoreResults(){
      return $this->_clear(5);
    }

    /**
     * Get <more_results> value
     *
     * @return int - \api\services\datastore\QueryResultBatch\MoreResultsType
     */
    public function getMoreResults(){
      return $this->_get(5);
    }

    /**
     * Set <more_results> value
     *
     * @param int - \api\services\datastore\QueryResultBatch\MoreResultsType $value
     * @return \api\services\datastore\QueryResultBatch
     */
    public function setMoreResults( $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <skipped_results> has a value
     *
     * @return boolean
     */
    public function hasSkippedResults(){
      return $this->_has(6);
    }

    /**
     * Clear <skipped_results> value
     *
     * @return \api\services\datastore\QueryResultBatch
     */
    public function clearSkippedResults(){
      return $this->_clear(6);
    }

    /**
     * Get <skipped_results> value
     *
     * @return int
     */
    public function getSkippedResults(){
      return $this->_get(6);
    }

    /**
     * Set <skipped_results> value
     *
     * @param int $value
     * @return \api\services\datastore\QueryResultBatch
     */
    public function setSkippedResults( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace api\services\datastore\ReadOptions {

  class ReadConsistency extends \DrSlump\Protobuf\Enum {
    const _DEFAULT = 0;
    const STRONG = 1;
    const EVENTUAL = 2;
  }
}
namespace api\services\datastore {

  class ReadOptions extends \DrSlump\Protobuf\Message {

    /**  @var int - \api\services\datastore\ReadOptions\ReadConsistency */
    public $read_consistency = \api\services\datastore\ReadOptions\ReadConsistency::_DEFAULT;

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.ReadOptions');

      // OPTIONAL ENUM read_consistency = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_consistency";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\ReadOptions\ReadConsistency';
      $f->default   = \api\services\datastore\ReadOptions\ReadConsistency::_DEFAULT;
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <read_consistency> has a value
     *
     * @return boolean
     */
    public function hasReadConsistency(){
      return $this->_has(1);
    }

    /**
     * Clear <read_consistency> value
     *
     * @return \api\services\datastore\ReadOptions
     */
    public function clearReadConsistency(){
      return $this->_clear(1);
    }

    /**
     * Get <read_consistency> value
     *
     * @return int - \api\services\datastore\ReadOptions\ReadConsistency
     */
    public function getReadConsistency(){
      return $this->_get(1);
    }

    /**
     * Set <read_consistency> value
     *
     * @param int - \api\services\datastore\ReadOptions\ReadConsistency $value
     * @return \api\services\datastore\ReadOptions
     */
    public function setReadConsistency( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(2);
    }

    /**
     * Clear <transaction> value
     *
     * @return \api\services\datastore\ReadOptions
     */
    public function clearTransaction(){
      return $this->_clear(2);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(2);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \api\services\datastore\ReadOptions
     */
    public function setTransaction( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace api\services\datastore {

  class Mutation extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\Entity[]  */
    public $upsert = array();

    /**  @var \api\services\datastore\Entity[]  */
    public $update = array();

    /**  @var \api\services\datastore\Entity[]  */
    public $insert = array();

    /**  @var \api\services\datastore\Entity[]  */
    public $insert_auto_id = array();

    /**  @var \api\services\datastore\Key[]  */
    public $delete = array();

    /**  @var boolean */
    public $force = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.Mutation');

      // REPEATED MESSAGE upsert = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "upsert";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Entity';
      $descriptor->addField($f);

      // REPEATED MESSAGE update = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "update";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Entity';
      $descriptor->addField($f);

      // REPEATED MESSAGE insert = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "insert";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Entity';
      $descriptor->addField($f);

      // REPEATED MESSAGE insert_auto_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "insert_auto_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Entity';
      $descriptor->addField($f);

      // REPEATED MESSAGE delete = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "delete";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      // OPTIONAL BOOL force = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "force";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <upsert> has a value
     *
     * @return boolean
     */
    public function hasUpsert(){
      return $this->_has(1);
    }

    /**
     * Clear <upsert> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function clearUpsert(){
      return $this->_clear(1);
    }

    /**
     * Get <upsert> value
     *
     * @param int $idx
     * @return \api\services\datastore\Entity
     */
    public function getUpsert($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <upsert> value
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function setUpsert(\api\services\datastore\Entity $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <upsert>
     *
     * @return \api\services\datastore\Entity[]
     */
    public function getUpsertList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <upsert>
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function addUpsert(\api\services\datastore\Entity $value){
     return $this->_add(1, $value);
    }

    /**
     * Check if <update> has a value
     *
     * @return boolean
     */
    public function hasUpdate(){
      return $this->_has(2);
    }

    /**
     * Clear <update> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function clearUpdate(){
      return $this->_clear(2);
    }

    /**
     * Get <update> value
     *
     * @param int $idx
     * @return \api\services\datastore\Entity
     */
    public function getUpdate($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <update> value
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function setUpdate(\api\services\datastore\Entity $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <update>
     *
     * @return \api\services\datastore\Entity[]
     */
    public function getUpdateList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <update>
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function addUpdate(\api\services\datastore\Entity $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <insert> has a value
     *
     * @return boolean
     */
    public function hasInsert(){
      return $this->_has(3);
    }

    /**
     * Clear <insert> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function clearInsert(){
      return $this->_clear(3);
    }

    /**
     * Get <insert> value
     *
     * @param int $idx
     * @return \api\services\datastore\Entity
     */
    public function getInsert($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <insert> value
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function setInsert(\api\services\datastore\Entity $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <insert>
     *
     * @return \api\services\datastore\Entity[]
     */
    public function getInsertList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <insert>
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function addInsert(\api\services\datastore\Entity $value){
     return $this->_add(3, $value);
    }

    /**
     * Check if <insert_auto_id> has a value
     *
     * @return boolean
     */
    public function hasInsertAutoId(){
      return $this->_has(4);
    }

    /**
     * Clear <insert_auto_id> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function clearInsertAutoId(){
      return $this->_clear(4);
    }

    /**
     * Get <insert_auto_id> value
     *
     * @param int $idx
     * @return \api\services\datastore\Entity
     */
    public function getInsertAutoId($idx = NULL){
      return $this->_get(4, $idx);
    }

    /**
     * Set <insert_auto_id> value
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function setInsertAutoId(\api\services\datastore\Entity $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <insert_auto_id>
     *
     * @return \api\services\datastore\Entity[]
     */
    public function getInsertAutoIdList(){
     return $this->_get(4);
    }

    /**
     * Add a new element to <insert_auto_id>
     *
     * @param \api\services\datastore\Entity $value
     * @return \api\services\datastore\Mutation
     */
    public function addInsertAutoId(\api\services\datastore\Entity $value){
     return $this->_add(4, $value);
    }

    /**
     * Check if <delete> has a value
     *
     * @return boolean
     */
    public function hasDelete(){
      return $this->_has(5);
    }

    /**
     * Clear <delete> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function clearDelete(){
      return $this->_clear(5);
    }

    /**
     * Get <delete> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key
     */
    public function getDelete($idx = NULL){
      return $this->_get(5, $idx);
    }

    /**
     * Set <delete> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\Mutation
     */
    public function setDelete(\api\services\datastore\Key $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <delete>
     *
     * @return \api\services\datastore\Key[]
     */
    public function getDeleteList(){
     return $this->_get(5);
    }

    /**
     * Add a new element to <delete>
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\Mutation
     */
    public function addDelete(\api\services\datastore\Key $value){
     return $this->_add(5, $value);
    }

    /**
     * Check if <force> has a value
     *
     * @return boolean
     */
    public function hasForce(){
      return $this->_has(6);
    }

    /**
     * Clear <force> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function clearForce(){
      return $this->_clear(6);
    }

    /**
     * Get <force> value
     *
     * @return boolean
     */
    public function getForce(){
      return $this->_get(6);
    }

    /**
     * Set <force> value
     *
     * @param boolean $value
     * @return \api\services\datastore\Mutation
     */
    public function setForce( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace api\services\datastore {

  class MutationResult extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index_updates = null;

    /**  @var \api\services\datastore\Key[]  */
    public $insert_auto_id_key = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.MutationResult');

      // REQUIRED INT32 index_updates = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index_updates";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE insert_auto_id_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "insert_auto_id_key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index_updates> has a value
     *
     * @return boolean
     */
    public function hasIndexUpdates(){
      return $this->_has(1);
    }

    /**
     * Clear <index_updates> value
     *
     * @return \api\services\datastore\MutationResult
     */
    public function clearIndexUpdates(){
      return $this->_clear(1);
    }

    /**
     * Get <index_updates> value
     *
     * @return int
     */
    public function getIndexUpdates(){
      return $this->_get(1);
    }

    /**
     * Set <index_updates> value
     *
     * @param int $value
     * @return \api\services\datastore\MutationResult
     */
    public function setIndexUpdates( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <insert_auto_id_key> has a value
     *
     * @return boolean
     */
    public function hasInsertAutoIdKey(){
      return $this->_has(2);
    }

    /**
     * Clear <insert_auto_id_key> value
     *
     * @return \api\services\datastore\MutationResult
     */
    public function clearInsertAutoIdKey(){
      return $this->_clear(2);
    }

    /**
     * Get <insert_auto_id_key> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key
     */
    public function getInsertAutoIdKey($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <insert_auto_id_key> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\MutationResult
     */
    public function setInsertAutoIdKey(\api\services\datastore\Key $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <insert_auto_id_key>
     *
     * @return \api\services\datastore\Key[]
     */
    public function getInsertAutoIdKeyList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <insert_auto_id_key>
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\MutationResult
     */
    public function addInsertAutoIdKey(\api\services\datastore\Key $value){
     return $this->_add(2, $value);
    }
  }
}

namespace api\services\datastore {

  class LookupRequest extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\ReadOptions */
    public $read_options = null;

    /**  @var \api\services\datastore\Key[]  */
    public $key = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.LookupRequest');

      // OPTIONAL MESSAGE read_options = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\ReadOptions';
      $descriptor->addField($f);

      // REPEATED MESSAGE key = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <read_options> has a value
     *
     * @return boolean
     */
    public function hasReadOptions(){
      return $this->_has(1);
    }

    /**
     * Clear <read_options> value
     *
     * @return \api\services\datastore\LookupRequest
     */
    public function clearReadOptions(){
      return $this->_clear(1);
    }

    /**
     * Get <read_options> value
     *
     * @return \api\services\datastore\ReadOptions
     */
    public function getReadOptions(){
      return $this->_get(1);
    }

    /**
     * Set <read_options> value
     *
     * @param \api\services\datastore\ReadOptions $value
     * @return \api\services\datastore\LookupRequest
     */
    public function setReadOptions(\api\services\datastore\ReadOptions $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(3);
    }

    /**
     * Clear <key> value
     *
     * @return \api\services\datastore\LookupRequest
     */
    public function clearKey(){
      return $this->_clear(3);
    }

    /**
     * Get <key> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key
     */
    public function getKey($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <key> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\LookupRequest
     */
    public function setKey(\api\services\datastore\Key $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <key>
     *
     * @return \api\services\datastore\Key[]
     */
    public function getKeyList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <key>
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\LookupRequest
     */
    public function addKey(\api\services\datastore\Key $value){
     return $this->_add(3, $value);
    }
  }
}

namespace api\services\datastore {

  class LookupResponse extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\EntityResult[]  */
    public $found = array();

    /**  @var \api\services\datastore\EntityResult[]  */
    public $missing = array();

    /**  @var \api\services\datastore\Key[]  */
    public $deferred = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.LookupResponse');

      // REPEATED MESSAGE found = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "found";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\EntityResult';
      $descriptor->addField($f);

      // REPEATED MESSAGE missing = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "missing";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\EntityResult';
      $descriptor->addField($f);

      // REPEATED MESSAGE deferred = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "deferred";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <found> has a value
     *
     * @return boolean
     */
    public function hasFound(){
      return $this->_has(1);
    }

    /**
     * Clear <found> value
     *
     * @return \api\services\datastore\LookupResponse
     */
    public function clearFound(){
      return $this->_clear(1);
    }

    /**
     * Get <found> value
     *
     * @param int $idx
     * @return \api\services\datastore\EntityResult
     */
    public function getFound($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <found> value
     *
     * @param \api\services\datastore\EntityResult $value
     * @return \api\services\datastore\LookupResponse
     */
    public function setFound(\api\services\datastore\EntityResult $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <found>
     *
     * @return \api\services\datastore\EntityResult[]
     */
    public function getFoundList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <found>
     *
     * @param \api\services\datastore\EntityResult $value
     * @return \api\services\datastore\LookupResponse
     */
    public function addFound(\api\services\datastore\EntityResult $value){
     return $this->_add(1, $value);
    }

    /**
     * Check if <missing> has a value
     *
     * @return boolean
     */
    public function hasMissing(){
      return $this->_has(2);
    }

    /**
     * Clear <missing> value
     *
     * @return \api\services\datastore\LookupResponse
     */
    public function clearMissing(){
      return $this->_clear(2);
    }

    /**
     * Get <missing> value
     *
     * @param int $idx
     * @return \api\services\datastore\EntityResult
     */
    public function getMissing($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <missing> value
     *
     * @param \api\services\datastore\EntityResult $value
     * @return \api\services\datastore\LookupResponse
     */
    public function setMissing(\api\services\datastore\EntityResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <missing>
     *
     * @return \api\services\datastore\EntityResult[]
     */
    public function getMissingList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <missing>
     *
     * @param \api\services\datastore\EntityResult $value
     * @return \api\services\datastore\LookupResponse
     */
    public function addMissing(\api\services\datastore\EntityResult $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <deferred> has a value
     *
     * @return boolean
     */
    public function hasDeferred(){
      return $this->_has(3);
    }

    /**
     * Clear <deferred> value
     *
     * @return \api\services\datastore\LookupResponse
     */
    public function clearDeferred(){
      return $this->_clear(3);
    }

    /**
     * Get <deferred> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key
     */
    public function getDeferred($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <deferred> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\LookupResponse
     */
    public function setDeferred(\api\services\datastore\Key $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <deferred>
     *
     * @return \api\services\datastore\Key[]
     */
    public function getDeferredList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <deferred>
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\LookupResponse
     */
    public function addDeferred(\api\services\datastore\Key $value){
     return $this->_add(3, $value);
    }
  }
}

namespace api\services\datastore {

  class BlindWriteRequest extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\Mutation */
    public $mutation = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.BlindWriteRequest');

      // REQUIRED MESSAGE mutation = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mutation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mutation> has a value
     *
     * @return boolean
     */
    public function hasMutation(){
      return $this->_has(1);
    }

    /**
     * Clear <mutation> value
     *
     * @return \api\services\datastore\BlindWriteRequest
     */
    public function clearMutation(){
      return $this->_clear(1);
    }

    /**
     * Get <mutation> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function getMutation(){
      return $this->_get(1);
    }

    /**
     * Set <mutation> value
     *
     * @param \api\services\datastore\Mutation $value
     * @return \api\services\datastore\BlindWriteRequest
     */
    public function setMutation(\api\services\datastore\Mutation $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class BlindWriteResponse extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\MutationResult */
    public $mutation_result = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.BlindWriteResponse');

      // OPTIONAL MESSAGE mutation_result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mutation_result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\MutationResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mutation_result> has a value
     *
     * @return boolean
     */
    public function hasMutationResult(){
      return $this->_has(1);
    }

    /**
     * Clear <mutation_result> value
     *
     * @return \api\services\datastore\BlindWriteResponse
     */
    public function clearMutationResult(){
      return $this->_clear(1);
    }

    /**
     * Get <mutation_result> value
     *
     * @return \api\services\datastore\MutationResult
     */
    public function getMutationResult(){
      return $this->_get(1);
    }

    /**
     * Set <mutation_result> value
     *
     * @param \api\services\datastore\MutationResult $value
     * @return \api\services\datastore\BlindWriteResponse
     */
    public function setMutationResult(\api\services\datastore\MutationResult $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class RunQueryRequest extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\ReadOptions */
    public $read_options = null;

    /**  @var \api\services\datastore\PartitionId */
    public $partition_id = null;

    /**  @var \api\services\datastore\Query */
    public $query = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.RunQueryRequest');

      // OPTIONAL MESSAGE read_options = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\ReadOptions';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE partition_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "partition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\PartitionId';
      $descriptor->addField($f);

      // REQUIRED MESSAGE query = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\api\services\datastore\Query';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <read_options> has a value
     *
     * @return boolean
     */
    public function hasReadOptions(){
      return $this->_has(1);
    }

    /**
     * Clear <read_options> value
     *
     * @return \api\services\datastore\RunQueryRequest
     */
    public function clearReadOptions(){
      return $this->_clear(1);
    }

    /**
     * Get <read_options> value
     *
     * @return \api\services\datastore\ReadOptions
     */
    public function getReadOptions(){
      return $this->_get(1);
    }

    /**
     * Set <read_options> value
     *
     * @param \api\services\datastore\ReadOptions $value
     * @return \api\services\datastore\RunQueryRequest
     */
    public function setReadOptions(\api\services\datastore\ReadOptions $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <partition_id> has a value
     *
     * @return boolean
     */
    public function hasPartitionId(){
      return $this->_has(2);
    }

    /**
     * Clear <partition_id> value
     *
     * @return \api\services\datastore\RunQueryRequest
     */
    public function clearPartitionId(){
      return $this->_clear(2);
    }

    /**
     * Get <partition_id> value
     *
     * @return \api\services\datastore\PartitionId
     */
    public function getPartitionId(){
      return $this->_get(2);
    }

    /**
     * Set <partition_id> value
     *
     * @param \api\services\datastore\PartitionId $value
     * @return \api\services\datastore\RunQueryRequest
     */
    public function setPartitionId(\api\services\datastore\PartitionId $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(3);
    }

    /**
     * Clear <query> value
     *
     * @return \api\services\datastore\RunQueryRequest
     */
    public function clearQuery(){
      return $this->_clear(3);
    }

    /**
     * Get <query> value
     *
     * @return \api\services\datastore\Query
     */
    public function getQuery(){
      return $this->_get(3);
    }

    /**
     * Set <query> value
     *
     * @param \api\services\datastore\Query $value
     * @return \api\services\datastore\RunQueryRequest
     */
    public function setQuery(\api\services\datastore\Query $value){
      return $this->_set(3, $value);
    }
  }
}

namespace api\services\datastore {

  class RunQueryResponse extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\QueryResultBatch */
    public $batch = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.RunQueryResponse');

      // OPTIONAL MESSAGE batch = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "batch";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\QueryResultBatch';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <batch> has a value
     *
     * @return boolean
     */
    public function hasBatch(){
      return $this->_has(1);
    }

    /**
     * Clear <batch> value
     *
     * @return \api\services\datastore\RunQueryResponse
     */
    public function clearBatch(){
      return $this->_clear(1);
    }

    /**
     * Get <batch> value
     *
     * @return \api\services\datastore\QueryResultBatch
     */
    public function getBatch(){
      return $this->_get(1);
    }

    /**
     * Set <batch> value
     *
     * @param \api\services\datastore\QueryResultBatch $value
     * @return \api\services\datastore\RunQueryResponse
     */
    public function setBatch(\api\services\datastore\QueryResultBatch $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore\BeginTransactionRequest {

  class IsolationLevel extends \DrSlump\Protobuf\Enum {
    const SNAPSHOT = 0;
    const SERIALIZABLE = 1;
  }
}
namespace api\services\datastore {

  class BeginTransactionRequest extends \DrSlump\Protobuf\Message {

    /**  @var int - \api\services\datastore\BeginTransactionRequest\IsolationLevel */
    public $isolation_level = \api\services\datastore\BeginTransactionRequest\IsolationLevel::SNAPSHOT;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.BeginTransactionRequest');

      // OPTIONAL ENUM isolation_level = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "isolation_level";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\BeginTransactionRequest\IsolationLevel';
      $f->default   = \api\services\datastore\BeginTransactionRequest\IsolationLevel::SNAPSHOT;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <isolation_level> has a value
     *
     * @return boolean
     */
    public function hasIsolationLevel(){
      return $this->_has(1);
    }

    /**
     * Clear <isolation_level> value
     *
     * @return \api\services\datastore\BeginTransactionRequest
     */
    public function clearIsolationLevel(){
      return $this->_clear(1);
    }

    /**
     * Get <isolation_level> value
     *
     * @return int - \api\services\datastore\BeginTransactionRequest\IsolationLevel
     */
    public function getIsolationLevel(){
      return $this->_get(1);
    }

    /**
     * Set <isolation_level> value
     *
     * @param int - \api\services\datastore\BeginTransactionRequest\IsolationLevel $value
     * @return \api\services\datastore\BeginTransactionRequest
     */
    public function setIsolationLevel( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class BeginTransactionResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.BeginTransactionResponse');

      // OPTIONAL BYTES transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(1);
    }

    /**
     * Clear <transaction> value
     *
     * @return \api\services\datastore\BeginTransactionResponse
     */
    public function clearTransaction(){
      return $this->_clear(1);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(1);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \api\services\datastore\BeginTransactionResponse
     */
    public function setTransaction( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class RollbackRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.RollbackRequest');

      // REQUIRED BYTES transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(1);
    }

    /**
     * Clear <transaction> value
     *
     * @return \api\services\datastore\RollbackRequest
     */
    public function clearTransaction(){
      return $this->_clear(1);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(1);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \api\services\datastore\RollbackRequest
     */
    public function setTransaction( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class RollbackResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.RollbackResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace api\services\datastore {

  class CommitRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $transaction = null;

    /**  @var \api\services\datastore\Mutation */
    public $mutation = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.CommitRequest');

      // REQUIRED BYTES transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE mutation = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mutation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(1);
    }

    /**
     * Clear <transaction> value
     *
     * @return \api\services\datastore\CommitRequest
     */
    public function clearTransaction(){
      return $this->_clear(1);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(1);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \api\services\datastore\CommitRequest
     */
    public function setTransaction( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <mutation> has a value
     *
     * @return boolean
     */
    public function hasMutation(){
      return $this->_has(2);
    }

    /**
     * Clear <mutation> value
     *
     * @return \api\services\datastore\CommitRequest
     */
    public function clearMutation(){
      return $this->_clear(2);
    }

    /**
     * Get <mutation> value
     *
     * @return \api\services\datastore\Mutation
     */
    public function getMutation(){
      return $this->_get(2);
    }

    /**
     * Set <mutation> value
     *
     * @param \api\services\datastore\Mutation $value
     * @return \api\services\datastore\CommitRequest
     */
    public function setMutation(\api\services\datastore\Mutation $value){
      return $this->_set(2, $value);
    }
  }
}

namespace api\services\datastore {

  class CommitResponse extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\MutationResult */
    public $mutation_result = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.CommitResponse');

      // OPTIONAL MESSAGE mutation_result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "mutation_result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\api\services\datastore\MutationResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mutation_result> has a value
     *
     * @return boolean
     */
    public function hasMutationResult(){
      return $this->_has(1);
    }

    /**
     * Clear <mutation_result> value
     *
     * @return \api\services\datastore\CommitResponse
     */
    public function clearMutationResult(){
      return $this->_clear(1);
    }

    /**
     * Get <mutation_result> value
     *
     * @return \api\services\datastore\MutationResult
     */
    public function getMutationResult(){
      return $this->_get(1);
    }

    /**
     * Set <mutation_result> value
     *
     * @param \api\services\datastore\MutationResult $value
     * @return \api\services\datastore\CommitResponse
     */
    public function setMutationResult(\api\services\datastore\MutationResult $value){
      return $this->_set(1, $value);
    }
  }
}

namespace api\services\datastore {

  class AllocateIdsRequest extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\Key[]  */
    public $key = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.AllocateIdsRequest');

      // REPEATED MESSAGE key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \api\services\datastore\AllocateIdsRequest
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key
     */
    public function getKey($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <key> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\AllocateIdsRequest
     */
    public function setKey(\api\services\datastore\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <key>
     *
     * @return \api\services\datastore\Key[]
     */
    public function getKeyList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <key>
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\AllocateIdsRequest
     */
    public function addKey(\api\services\datastore\Key $value){
     return $this->_add(1, $value);
    }
  }
}

namespace api\services\datastore {

  class AllocateIdsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \api\services\datastore\Key[]  */
    public $key = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'api.services.datastore.AllocateIdsResponse');

      // REPEATED MESSAGE key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\api\services\datastore\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \api\services\datastore\AllocateIdsResponse
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @param int $idx
     * @return \api\services\datastore\Key
     */
    public function getKey($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <key> value
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\AllocateIdsResponse
     */
    public function setKey(\api\services\datastore\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <key>
     *
     * @return \api\services\datastore\Key[]
     */
    public function getKeyList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <key>
     *
     * @param \api\services\datastore\Key $value
     * @return \api\services\datastore\AllocateIdsResponse
     */
    public function addKey(\api\services\datastore\Key $value){
     return $this->_add(1, $value);
    }
  }
}

